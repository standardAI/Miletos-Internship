def batchnorm_backward(dout, cache):
    """Backward pass for batch normalization.

    For this implementation, you should write out a computation graph for
    batch normalization on paper and propagate gradients backward through
    intermediate nodes.

    Inputs:
    - dout: Upstream derivatives, of shape (N, D)
    - cache: Variable of intermediates from batchnorm_forward.

    Returns a tuple of:
    - dx: Gradient with respect to inputs x, of shape (N, D)
    - dgamma: Gradient with respect to scale parameter gamma, of shape (D,)
    - dbeta: Gradient with respect to shift parameter beta, of shape (D,)
    """
    dx, dgamma, dbeta = None, None, None
    ###########################################################################
    # TODO: Implement the backward pass for batch normalization. Store the    #
    # results in the dx, dgamma, and dbeta variables.                         #
    # Referencing the original paper (https://arxiv.org/abs/1502.03167)       #
    # might prove to be helpful.                                              #
    ###########################################################################
    # *****START OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****

    x, x_batchnormalized, sample_mean, sample_var, gamma, beta, eps = cache
    N, D = x.shape
    # derivative of gamma * x_batchnormalized + beta
    dxbatchnormalized = dout * gamma
    # derivative of (x - sample_mean) / (np.sqrt(sample_var + eps))
    dsample_var = np.sum(dxbatchnormalized * (x - sample_mean) * (-1/2) * (sample_var + eps)**(-3/2), axis=0)
    dsample_mean = np.sum(dxbatchnormalized * (-1/np.sqrt(sample_var + eps)), axis=0) + dsample_var * np.sum(-2*(x - sample_mean), axis=0)/N
    dx = dxbatchnormalized * 1 / np.sqrt(sample_var + eps) + dsample_var * 2 * (x - sample_mean) / N + dsample_mean / N
    dgamma = np.sum(dout * x_batchnormalized, axis=0)
    dbeta = np.sum(dout, axis=0)

    # *****END OF YOUR CODE (DO NOT DELETE/MODIFY THIS LINE)*****
    ###########################################################################
    #                             END OF YOUR CODE                            #
    ###########################################################################

    return dx, dgamma, dbeta
